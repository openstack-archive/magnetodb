#!/usr/bin/env python

# Copyright 2013 Mirantis Inc.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import os
import sys
from paste import deploy

import eventlet
eventlet.patcher.monkey_patch(all=True)

from eventlet import wsgi
wsgi.MAX_HEADER_LINE = 65536

# If ../PRODUCT_NAME/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                                os.pardir,
                                                os.pardir))
if os.path.exists(os.path.join(possible_topdir, "magnetodb", '__init__.py')):
    sys.path.insert(0, possible_topdir)

from oslo.config import cfg

reload(sys)
sys.setdefaultencoding('utf-8')

CONF = cfg.ConfigOpts()
common_opts = [
    cfg.StrOpt('api_paste_config',
               help='File name for the paste.deploy config for magnetodb-api'),

    cfg.StrOpt('bind_host'),

    cfg.IntOpt('bind_port'),
]

CONF.register_opts(common_opts)

if __name__ == '__main__':
    from magnetodb.common import PROJECT_NAME
    prog_name = os.path.basename(sys.argv[0])
    CONF(project=PROJECT_NAME, prog=prog_name, args=sys.argv[1:])

    try:
        api_paste_config_file = CONF.find_file(CONF.api_paste_config)
        app = deploy.loadapp("config:{}".format(api_paste_config_file))

        listener = eventlet.listen((CONF.bind_host, CONF.bind_port))
        wsgi.server(listener, app)

    except Exception as error:
        import traceback
        print(traceback.format_exc())
        sys.exit("ERROR: %s" % error)
